{"version":3,"sources":["queries/queries.js","Congrats.js","Wrong.js","Login.js","Register.js","App.js","index.js"],"names":["getUsersQuery","gql","_templateObject","addUserMutation","_templateObject2","getUserQuery","_templateObject3","Congrats","react_default","a","createElement","Wrong","compose","graphql","name","props","console","log","data","_useState","useState","_useState2","Object","slicedToArray","isSuccessful","setSuccessful","_useState3","email","password","_useState4","existingUser","setExistingUser","handler","event","preventDefault","_event$target","target","value","prevValue","objectSpread2","[object Object]","search","users","i","length","onChange","type","placeholder","onClick","setRegister","src_Congrats","src_Wrong","fname","lname","newUser","setUser","changeHandler","variables","refetchQueries","query","client","ApolloClient","uri","App","isRegistered","react_common_esm","className","src_Login","src_Register","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.49938536.chunk.js","sourcesContent":["import {gql} from \"apollo-boost\";\r\n\r\nconst getUsersQuery = gql`{\r\n  users{\r\n    email\r\n    password\r\n  }\r\n}`\r\n\r\nconst addUserMutation = gql`\r\n  mutation($fname:String!,$lname:String!,$email:String!,$password:String!){\r\n    addUser(fname:$fname, lname:$lname, email:$email, password:$password){\r\n      email\r\n      password\r\n    }\r\n  }`\r\n\r\n  const getUserQuery = gql`\r\n    query($email:String){\r\n      user(email:$email){\r\n        email\r\n        password\r\n      }\r\n    }`\r\nexport {getUsersQuery, addUserMutation, getUserQuery};\r\n","import React from \"react\";\r\n\r\nfunction Congrats(){\r\n    return <h1>Congrats!</h1>;\r\n}\r\n\r\nexport default Congrats;","import React from \"react\";\r\n\r\nfunction Wrong(){\r\n    return <h1>Enter Credentials Again!</h1>;\r\n}\r\n\r\nexport default Wrong;","import React, { useState } from \"react\";\r\nimport {graphql} from \"react-apollo\";\r\nimport {flowRight as compose} from 'lodash';\r\nimport {getUsersQuery, getUserQuery} from \"./queries/queries\";\r\nimport Congrats from \"./Congrats\";\r\nimport Wrong from \"./Wrong\";\r\n\r\nfunction Login(props)\r\n{\r\n  console.log(props.getUsersQuery);\r\n  const data=props.getUsersQuery;\r\n  const [isSuccessful, setSuccessful] = useState(false);\r\n  const [existingUser, setExistingUser] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  function handler(event){\r\n    event.preventDefault();\r\n    var {name, value} = event.target;\r\n    setExistingUser((prevValue)=>{\r\n      return{\r\n        ...prevValue,\r\n        [name]: value\r\n      };\r\n    });\r\n  }\r\n\r\n\r\nfunction search(a){\r\n    // data.users.find( user => {\r\n    //   return (user.email === a.email);\r\n    // })\r\n    console.log(data.users)\r\n    for(var i=0; i<data.users.length;i++){\r\n        if (data.users[i].email === a.email&& data.users[i].password === a.password) {\r\n          console.log(data.users[i]);\r\n            return true;\r\n        }}\r\n            return false;\r\n        }\r\n    \r\n  function login(event){\r\n      event.preventDefault();\r\n      // refetchQueries: [{query:getUsersQuery}]\r\n      // if(search(existingUser)!==undefined)\r\n        setSuccessful(search(existingUser));\r\n         console.log(search(existingUser));\r\n         \r\n    }\r\n      return (\r\n            <div>\r\n              <input onChange={handler} name=\"email\" type=\"email\" placeholder=\"Email\" value={existingUser.email}/>\r\n              <input onChange={handler} name=\"password\" type=\"password\" placeholder=\"Password\" value={existingUser.password}/>\r\n              <button onClick={login}>Login</button>\r\n              <button onClick={(event)=>{\r\n                props.setRegister(false);\r\n                event.preventDefault();\r\n              }}>Register</button>\r\n              {isSuccessful ? <Congrats /> :<Wrong />}\r\n            </div>\r\n         );\r\n}\r\n\r\nexport default compose(\r\ngraphql(getUsersQuery, {name:\"getUsersQuery\"}),\r\ngraphql(getUserQuery, {name: \"getUserQuery\"}))(Login);\r\n","import React, { useState } from \"react\";\r\nimport {graphql} from \"react-apollo\";\r\nimport {flowRight as compose} from 'lodash';\r\nimport {getUsersQuery, addUserMutation} from \"./queries/queries\";\r\n\r\nfunction Register(props){\r\n  console.log(props);\r\n  const [newUser, setUser] = useState({\r\n    fname: \"\",\r\n    lname: \"\",\r\n    email: \"\",\r\n    password: \"\"\r\n  });\r\n  function changeHandler(event) {\r\n    var { name, value } = event.target;\r\n    setUser((prevValue) => {\r\n      return {\r\n        ...prevValue,\r\n        [name]: value\r\n      };\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        onChange={changeHandler}\r\n        name=\"fname\"\r\n        type=\"text\"\r\n        placeholder=\"First Name\"\r\n        value={newUser.fname}\r\n      />\r\n      <input\r\n        onChange={changeHandler}\r\n        name=\"lname\"\r\n        type=\"text\"\r\n        placeholder=\"Last Name\"\r\n        value={newUser.lname}\r\n      />\r\n      <input\r\n        onChange={changeHandler}\r\n        name=\"email\"\r\n        type=\"email\"\r\n        placeholder=\"Email\"\r\n        value={newUser.email}\r\n      />\r\n      <input\r\n        onChange={changeHandler}\r\n        name=\"password\"\r\n        type=\"password\"\r\n        placeholder=\"Password\"\r\n        value={newUser.password}\r\n      />\r\n      <button\r\n        onClick={(event) => {\r\n          event.preventDefault();\r\n           props.addUserMutation({\r\n             variables:{\r\n               fname: newUser.fname,\r\n               lname: newUser.lname,\r\n               email: newUser.email,\r\n               password:newUser.password\r\n             },\r\n             refetchQueries: [{query:getUsersQuery}]\r\n           });\r\n           props.setRegister(true);\r\n        }}\r\n      >\r\n        Register\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default compose(\r\n  graphql(getUsersQuery, {name:\"getUsersQuery\"}),\r\n  graphql(addUserMutation, {name:\"addUserMutation\"}))(Register);\r\n","import React, { useState } from \"react\";\nimport ApolloClient from 'apollo-boost';\nimport {ApolloProvider} from \"react-apollo\";\nimport Login from \"./Login\";\nimport Register from \"./Register\";\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000/graphql\"\n});\n\n\nexport default function App() {\n  const [isRegistered, setRegister] = useState(true);\n  return (\n    <ApolloProvider client={client}>\n    <div className=\"container\">\n      <h1>Hello!</h1>\n      <form>\n       {isRegistered?<Login setRegister={setRegister}/>:<Register setRegister={setRegister}/>}\n      </form>\n    </div>\n    </ApolloProvider>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}